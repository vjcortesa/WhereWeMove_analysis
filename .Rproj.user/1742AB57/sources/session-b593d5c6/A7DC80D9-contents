library(shiny)
library(ggplot2)
library(plotly)
library(rlang)  # Needed for !!sym()

# Load necessary libraries
library(readxl)
library(readr)
# Load dplyr for data manipulation
library(dplyr)
# data plot
library(ggplot2)
library(tidyr)
library(tibble)
library(purrr)
library(stringr)
library(forcats)
library(tidyverse)
library(ggpattern)
library(shiny)

# 0. Naming conventions
  #f, filtered
  #s, selection
  #ave, average
  #_plt plot
  #formatted

# 1. Reading the tables to retrieve the playerround data
gameversion <- read_csv("250814_housinggame-tables\\gameversion.csv")
gamesession <- read_csv("250814_housinggame-tables\\gamesession.csv")
group <- read_csv("250814_housinggame-tables\\group.csv")
groupround <- read_csv("250814_housinggame-tables\\groupround.csv")
playerround <- read_csv("250814_housinggame-tables\\playerround.csv")
welfaretype <- read_csv("250814_housinggame-tables\\welfaretype.csv")
scenario <- read_csv("250814_housinggame-tables\\scenario.csv")
player <- read_csv("250814_housinggame-tables\\player.csv")

fgamesession <- gamesession %>% select(id,name)


# Dummy datasets
set.seed(123)
dataset1 <- data.frame(
  #Synthetic dataset:   Repeats the letters A to E, each 10 times (i.e. 5 categories Ã— 10 rows)
  Category = rep(LETTERS[1:5], each = 10),
  Value1 = rnorm(50, 100, 15),
  Value2 = rnorm(50, 50, 10),
  Value3 = rnorm(50, 75, 20)
)

dataset2 <- data.frame(
  Category = rep(letters[1:5], each = 10),
  Value1 = rnorm(50, 200, 25),
  Value2 = rnorm(50, 80, 12),
  Value3 = rnorm(50, 60, 18)
)

# Named list of datasets
datasets <- list("Dataset 1" = dataset1, "Dataset 2" = dataset2)

# UI
ui <- fluidPage(
  titlePanel("Dynamic ggplot with Multiple Dropdowns"),
  sidebarLayout(
    sidebarPanel(
      selectInput("dataset", "Choose Dataset:",
                  choices = names(datasets)),
      selectInput("yvar", "Choose Y-axis Variable:",
                  choices = c("Value1", "Value2", "Value3")),
      selectInput("plotType", "Choose Plot Type:",
                  choices = c("Boxplot", "Scatterplot", "Lineplot"))
    ),
    #Step 1: Replace plotOutput() with plotlyOutput() in the U
    # mainPanel(
    #   plotOutput("plot")
    # )
    mainPanel(
      plotlyOutput("plot")  # Enables hover interactivity
    )
    
  )
)

# Server
server <- function(input, output) {
  output$plot <- renderPlotly({
    data <- datasets[[input$dataset]]
    
    # Base ggplot with hover text
    ## x = Category: Sets the x-axis to the categorical variable.
    ## Dynamically selects the y-axis variable based on user input
    ## Creates a custom tooltip string for hover interactivity.
    # p <- ggplot(data, aes(x = Category, y = !!sym(input$yvar),
    #                       text = paste("Category:", Category,
    #                                    "\nValue:", round(!!sym(input$yvar), 2)))) +
    #   labs(
    #     title = paste(input$plotType, "of", input$yvar, "by Category"),
    #     x = "Category",
    #     y = input$yvar
    #   ) +
    #   theme_minimal() +
    #   theme(
    #     plot.title = element_text(hjust = 0.5),
    #     panel.background = element_rect(fill = "white"),
    #     plot.background = element_rect(fill = "white")
    #   )
    # 
    # # Add geom based on plot type
    # if (input$plotType == "Boxplot") {
    #   p <- p + geom_boxplot(fill = "#79A2C5", color = "black")
    # } else if (input$plotType == "Scatterplot") {
    #   p <- p + geom_point(color = "#dfaba3", size = 3)
    # } else if (input$plotType == "Lineplot") {
    #   p <- p + geom_line(aes(group = Category), color = "#E1BB70", size = 1)
    # }
    # 
    # # Convert to interactive plotly
    # ggplotly(p, tooltip = "text")
  })
}


# Run the app
shinyApp(ui = ui, server = server)
