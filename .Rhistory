# Define dataset based on input criteria
#if
# Select variables columns from the filtered dataset
income_dist <- dataset %>% select(all_of(variables))
%>% filter(round_number == 0)
# if (session == "all") {
#   print(session)
# } else {
#   print("Negative number")
# }
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
View(f_playerround)
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
view(dataset_income)
if (group_name != "all") {
dataset <- dataset %>% filter(group_name == group_name)
}
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
view(dataset_income)
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
# if (session_name != "all") {
#    dataset <- dataset %>% filter(gamesession_name == session_name)
#         view(grouped_dataset)
#    }
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
dataset <- dataset %>% filter(group_name == group_name)
# income_dist_plt_ref <- dataset %>%
#   group_by(round_income) %>%
#   summarise(
#     ave_income_minus_living = round(mean(income_minus_living, na.rm = TRUE), 2),
#     ave_Spendable = round(mean(spendable_income, na.rm = TRUE), 2)
#   )
}
if (player_name != "all") {
dataset <- dataset %>% filter(code == player_name)
}
income_dist <- dataset
# Calculate the mean values per dataset variable
income_dist_plt <- income_dist %>%
group_by(round_income) %>%
summarise(
ave_income_minus_living = round(mean(income_minus_living, na.rm = TRUE), 2),
ave_Spendable = round(mean(spendable_income, na.rm = TRUE), 2),
ave_mortgage = round(mean(mortgage_payment, na.rm = TRUE), 2),
ave_taxes = round(mean(cost_taxes, na.rm = TRUE), 2),
ave_debt = round(mean(paid_debt, na.rm = TRUE), 2),
ave_measures = round(mean(cost_measures_bought, na.rm = TRUE), 2),
ave_satisfaction = round(mean(cost_satisfaction_bought, na.rm = TRUE), 2),
ave_fluvial_damage  = round(mean(cost_fluvial_damage, na.rm = TRUE), 2),
ave_pluvial_damage = round(mean(cost_pluvial_damage, na.rm = TRUE), 2),
) %>%
ungroup()
View(income_dist)
# Categorise the income distribution per plot category
line_spendable = income_dist_plt %>% select(ave_Spendable)
bars_expenses <- income_dist_plt %>% select(ave_debt, ave_mortgage, ave_taxes, ave_satisfaction, ave_measures, ave_fluvial_damage, ave_pluvial_damage)
area_income <- income_dist_plt %>% select(ave_income_minus_living)
# Adding an index to plot the area and bars together
line_spendable$Index <- seq_len(nrow(line_spendable))
bars_expenses$Index <- seq_len(nrow(bars_expenses))
area_income$Index <- seq_len(nrow(area_income))
# Set x range of the plot
# Calculate limits
x_min <- min(area_income$Index) -0.5 #starts from zero
x_max <- max(area_income$Index) + 0.5
w = 0.9
# Formatting the dataset to plot per category
bars_expenses_formatted <- bars_expenses %>%
pivot_longer(cols = -Index, names_to = "Type", values_to = "Value")
area_income_formatted <- area_income %>%
pivot_longer(cols = -Index, names_to = "Type", values_to = "Value")
View(area_income_formatted)
# Formatting the dataset to stack the bars following the given order
bars_expenses_formatted$Type <- factor(
bars_expenses_formatted$Type,
levels = c(
"ave_satisfaction",
"ave_fluvial_damage",
"ave_pluvial_damage",
"ave_measures",
"ave_debt",
"ave_taxes",
"ave_mortgage"
)
)
plot <- ggplot() +
geom_area(data = area_income_formatted,
aes(x = Index, y = Value, fill = Type),
alpha = 0.6
) +
geom_bar(data = bars_expenses_formatted,
aes(x = Index, y = Value, fill = Type),
stat = "identity",
position = "stack",
width = w
) +
geom_line(
data = line_spendable,
aes(x = Index,
y = ave_Spendable,
color = "ave_Spendable"),
size = 1.2) +
labs(
title = plot_title,
subtitle = plot_subtitle,
color = "Category"
) +
# Custom fill colors to what is plotted in the legend
scale_color_manual(
name = "Round Spendable \n Income",
values = c(
"ave_Spendable" = "black"),
labels = c(
"ave_Spendable" = "Round income - costs")
) +
scale_fill_manual(
name = "Round Budget",
values = c(
"ave_income_minus_living" = "#E1BB70",
"ave_debt" = "black",
"ave_satisfaction" = "#dfaba3",
"ave_measures" = "white",
"ave_mortgage" = "#cccccc",
"ave_taxes" = "#dddddd",
"ave_fluvial_damage" = "#79A2C5",
"ave_pluvial_damage" = "#79BCC5"),
labels = c(
"ave_income_minus_living" = "Income - Living costs",
"ave_debt" = "Start savings (+) / debt (-)",
"ave_satisfaction" = "Satisfaction costs",
"ave_measures" = "Measures costs",
"ave_mortgage" = "Mortgage costs",
"ave_taxes" = "Taxes costs",
"ave_fluvial_damage" = "River damage costs",
"ave_pluvial_damage" = "Rain damage costs")
) +
#Y-axis formatting
scale_y_continuous(
labels = function(y) y / 1000,
name = "Game Currency (k)"
) +
scale_x_continuous(
name = "Welfare Classes",
breaks = c(1, 2, 3, 4, 5, 6),
labels = c("Very Low", "Low", "Low-average", "High-average", "High", "Very High")
#limits = c(x_min, x_max)
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 10),
plot.title.position = "plot"
)
print(plot)
ggsave(plot_name, width = 12, height = 6, dpi = 300)
return(plot)
plot_income_dist <- function(Question_id, question_name, variables, dataset, session_name, group_name, player_name, round) {
# Plot title definition
plot_title <- dataanalysis$Question[dataanalysis$Question_id ==Question_id]
plot_subtitle <- paste("Session:", session_name, "Group:", group_name, "Player:", player_name, "Round_", round)
plot_name <- paste("IncomeDistribution_","Session_",session_name, "Group_", group_name, "Player_", player_name,"Round_", round,".png")
# Define dataset based on input criteria
# Select variables columns from the filtered dataset
dataset <- dataset %>% select(all_of(variables))
dataset$income_minus_living <- dataset$round_income - dataset$living_costs
if (session_name != "all") {
dataset <- dataset %>% filter(gamesession_name == session_name)
}
if (group_name != "all") {
dataset <- dataset %>% filter(group_name == group_name)
# income_dist_plt_ref <- dataset %>%
#   group_by(round_income) %>%
#   summarise(
#     ave_income_minus_living = round(mean(income_minus_living, na.rm = TRUE), 2),
#     ave_Spendable = round(mean(spendable_income, na.rm = TRUE), 2)
#   )
}
if (player_name != "all") {
dataset <- dataset %>% filter(code == player_name)
}
income_dist <- dataset
# Calculate the mean values per dataset variable
income_dist_plt <- income_dist %>%
group_by(round_income) %>%
summarise(
ave_income_minus_living = round(mean(income_minus_living, na.rm = TRUE), 2),
ave_Spendable = round(mean(spendable_income, na.rm = TRUE), 2),
ave_mortgage = round(mean(mortgage_payment, na.rm = TRUE), 2),
ave_taxes = round(mean(cost_taxes, na.rm = TRUE), 2),
ave_debt = round(mean(paid_debt, na.rm = TRUE), 2),
ave_measures = round(mean(cost_measures_bought, na.rm = TRUE), 2),
ave_satisfaction = round(mean(cost_satisfaction_bought, na.rm = TRUE), 2),
ave_fluvial_damage  = round(mean(cost_fluvial_damage, na.rm = TRUE), 2),
ave_pluvial_damage = round(mean(cost_pluvial_damage, na.rm = TRUE), 2),
) %>%
ungroup()
View(income_dist)
# Categorise the income distribution per plot category
line_spendable = income_dist_plt %>% select(ave_Spendable)
bars_expenses <- income_dist_plt %>% select(ave_debt, ave_mortgage, ave_taxes, ave_satisfaction, ave_measures, ave_fluvial_damage, ave_pluvial_damage)
area_income <- income_dist_plt %>% select(ave_income_minus_living)
# Adding an index to plot the area and bars together
line_spendable$Index <- seq_len(nrow(line_spendable))
bars_expenses$Index <- seq_len(nrow(bars_expenses))
area_income$Index <- seq_len(nrow(area_income))
# Set x range of the plot
# Calculate limits
x_min <- min(area_income$Index) -0.5 #starts from zero
x_max <- max(area_income$Index) + 0.5
w = 0.9
# Formatting the dataset to plot per category
bars_expenses_formatted <- bars_expenses %>%
pivot_longer(cols = -Index, names_to = "Type", values_to = "Value")
area_income_formatted <- area_income %>%
pivot_longer(cols = -Index, names_to = "Type", values_to = "Value")
View(area_income_formatted)
# Formatting the dataset to stack the bars following the given order
bars_expenses_formatted$Type <- factor(
bars_expenses_formatted$Type,
levels = c(
"ave_satisfaction",
"ave_fluvial_damage",
"ave_pluvial_damage",
"ave_measures",
"ave_debt",
"ave_taxes",
"ave_mortgage"
)
)
plot <- ggplot() +
geom_area(data = area_income_formatted,
aes(x = Index, y = Value, fill = Type),
alpha = 0.6
) +
geom_bar(data = bars_expenses_formatted,
aes(x = Index, y = Value, fill = Type),
stat = "identity",
position = "stack",
width = w
) +
geom_line(
data = line_spendable,
aes(x = Index,
y = ave_Spendable,
color = "ave_Spendable"),
size = 1.2) +
labs(
title = plot_title,
subtitle = plot_subtitle,
color = "Category"
) +
# Custom fill colors to what is plotted in the legend
scale_color_manual(
name = "Round Spendable \n Income",
values = c(
"ave_Spendable" = "black"),
labels = c(
"ave_Spendable" = "Round income - costs")
) +
scale_fill_manual(
name = "Round Budget",
values = c(
"ave_income_minus_living" = "#E1BB70",
"ave_debt" = "black",
"ave_satisfaction" = "#dfaba3",
"ave_measures" = "white",
"ave_mortgage" = "#cccccc",
"ave_taxes" = "#dddddd",
"ave_fluvial_damage" = "#79A2C5",
"ave_pluvial_damage" = "#79BCC5"),
labels = c(
"ave_income_minus_living" = "Income - Living costs",
"ave_debt" = "Start savings (+) / debt (-)",
"ave_satisfaction" = "Satisfaction costs",
"ave_measures" = "Measures costs",
"ave_mortgage" = "Mortgage costs",
"ave_taxes" = "Taxes costs",
"ave_fluvial_damage" = "River damage costs",
"ave_pluvial_damage" = "Rain damage costs")
) +
#Y-axis formatting
scale_y_continuous(
labels = function(y) y / 1000,
name = "Game Currency (k)"
) +
scale_x_continuous(
name = "Welfare Classes",
breaks = c(1, 2, 3, 4, 5, 6),
labels = c("Very Low", "Low", "Low-average", "High-average", "High", "Very High")
#limits = c(x_min, x_max)
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 10),
plot.title.position = "plot"
)
print(plot)
ggsave(plot_name, width = 12, height = 6, dpi = 300)
return(plot)
}
#plot_income_dist <- function(Question_id, question_name, variables, dataset,
#                             session_name, group, player, round)
question_plt <- dataanalysis$Question[dataanalysis$Question_id ==Question_id]
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
debugSource("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
view(dataset)
if (session_name != "all") {
dataset <- dataset %>% filter(gamesession_name == session_name)
view(dataset)
}
if (group_name != "all") {
dataset <- dataset %>% filter(group_name == group_name)
# income_dist_plt_ref <- dataset %>%
#   group_by(round_income) %>%
#   summarise(
#     ave_income_minus_living = round(mean(income_minus_living, na.rm = TRUE), 2),
#     ave_Spendable = round(mean(spendable_income, na.rm = TRUE), 2)
#   )
}
if (player_name != "all") {
dataset <- dataset %>% filter(code == player_name)
}
income_dist <- dataset
# Calculate the mean values per dataset variable
income_dist_plt <- income_dist %>%
group_by(round_income) %>%
summarise(
ave_income_minus_living = round(mean(income_minus_living, na.rm = TRUE), 2),
ave_Spendable = round(mean(spendable_income, na.rm = TRUE), 2),
ave_mortgage = round(mean(mortgage_payment, na.rm = TRUE), 2),
ave_taxes = round(mean(cost_taxes, na.rm = TRUE), 2),
ave_debt = round(mean(paid_debt, na.rm = TRUE), 2),
ave_measures = round(mean(cost_measures_bought, na.rm = TRUE), 2),
ave_satisfaction = round(mean(cost_satisfaction_bought, na.rm = TRUE), 2),
ave_fluvial_damage  = round(mean(cost_fluvial_damage, na.rm = TRUE), 2),
ave_pluvial_damage = round(mean(cost_pluvial_damage, na.rm = TRUE), 2),
) %>%
ungroup()
View(income_dist)
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
view(dataset)
View(income_dist)
# Categorise the income distribution per plot category
line_spendable = income_dist_plt %>% select(ave_Spendable)
view(dataset)
income_dist <- dataset
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
plot_income_dist <- function(Question_id, question_name, variables, dataset, session_name, group_name, player_name, round) {
# Plot title definition
plot_title <- dataanalysis$Question[dataanalysis$Question_id ==Question_id]
plot_subtitle <- paste("Session:", session_name, "Group:", group_name, "Player:", player_name, "Round_", round)
plot_name <- paste("IncomeDistribution_","Session_",session_name, "Group_", group_name, "Player_", player_name,"Round_", round,".png")
# Define dataset based on input criteria
# Select variables columns from the filtered dataset
dataset <- dataset %>% select(all_of(variables))
dataset$income_minus_living <- dataset$round_income - dataset$living_costs
if (session_name != "all") {
dataset <- dataset %>% filter(gamesession_name == session_name)
}
if (group_name != "all") {
dataset <- dataset %>% filter(group_name == group_name)
# income_dist_plt_ref <- dataset %>%
#   group_by(round_income) %>%
#   summarise(
#     ave_income_minus_living = round(mean(income_minus_living, na.rm = TRUE), 2),
#     ave_Spendable = round(mean(spendable_income, na.rm = TRUE), 2)
#   )
}
if (player_name != "all") {
dataset <- dataset %>% filter(code == player_name)
}
view(dataset)
income_dist <- dataset
# Calculate the mean values per dataset variable
income_dist_plt <- income_dist %>%
group_by(round_income) %>%
summarise(
ave_income_minus_living = round(mean(income_minus_living, na.rm = TRUE), 2),
ave_Spendable = round(mean(spendable_income, na.rm = TRUE), 2),
ave_mortgage = round(mean(mortgage_payment, na.rm = TRUE), 2),
ave_taxes = round(mean(cost_taxes, na.rm = TRUE), 2),
ave_debt = round(mean(paid_debt, na.rm = TRUE), 2),
ave_measures = round(mean(cost_measures_bought, na.rm = TRUE), 2),
ave_satisfaction = round(mean(cost_satisfaction_bought, na.rm = TRUE), 2),
ave_fluvial_damage  = round(mean(cost_fluvial_damage, na.rm = TRUE), 2),
ave_pluvial_damage = round(mean(cost_pluvial_damage, na.rm = TRUE), 2),
) %>%
ungroup()
View(income_dist)
# Categorise the income distribution per plot category
line_spendable = income_dist_plt %>% select(ave_Spendable)
bars_expenses <- income_dist_plt %>% select(ave_debt, ave_mortgage, ave_taxes, ave_satisfaction, ave_measures, ave_fluvial_damage, ave_pluvial_damage)
area_income <- income_dist_plt %>% select(ave_income_minus_living)
# Adding an index to plot the area and bars together
line_spendable$Index <- seq_len(nrow(line_spendable))
bars_expenses$Index <- seq_len(nrow(bars_expenses))
area_income$Index <- seq_len(nrow(area_income))
# Set x range of the plot
# Calculate limits
x_min <- min(area_income$Index) -0.5 #starts from zero
x_max <- max(area_income$Index) + 0.5
w = 0.9
# Formatting the dataset to plot per category
bars_expenses_formatted <- bars_expenses %>%
pivot_longer(cols = -Index, names_to = "Type", values_to = "Value")
area_income_formatted <- area_income %>%
pivot_longer(cols = -Index, names_to = "Type", values_to = "Value")
View(area_income_formatted)
# Formatting the dataset to stack the bars following the given order
bars_expenses_formatted$Type <- factor(
bars_expenses_formatted$Type,
levels = c(
"ave_satisfaction",
"ave_fluvial_damage",
"ave_pluvial_damage",
"ave_measures",
"ave_debt",
"ave_taxes",
"ave_mortgage"
)
)
plot <- ggplot() +
geom_area(data = area_income_formatted,
aes(x = Index, y = Value, fill = Type),
alpha = 0.6
) +
geom_bar(data = bars_expenses_formatted,
aes(x = Index, y = Value, fill = Type),
stat = "identity",
position = "stack",
width = w
) +
geom_line(
data = line_spendable,
aes(x = Index,
y = ave_Spendable,
color = "ave_Spendable"),
size = 1.2) +
labs(
title = plot_title,
subtitle = plot_subtitle,
color = "Category"
) +
# Custom fill colors to what is plotted in the legend
scale_color_manual(
name = "Round Spendable \n Income",
values = c(
"ave_Spendable" = "black"),
labels = c(
"ave_Spendable" = "Round income - costs")
) +
scale_fill_manual(
name = "Round Budget",
values = c(
"ave_income_minus_living" = "#E1BB70",
"ave_debt" = "black",
"ave_satisfaction" = "#dfaba3",
"ave_measures" = "white",
"ave_mortgage" = "#cccccc",
"ave_taxes" = "#dddddd",
"ave_fluvial_damage" = "#79A2C5",
"ave_pluvial_damage" = "#79BCC5"),
labels = c(
"ave_income_minus_living" = "Income - Living costs",
"ave_debt" = "Start savings (+) / debt (-)",
"ave_satisfaction" = "Satisfaction costs",
"ave_measures" = "Measures costs",
"ave_mortgage" = "Mortgage costs",
"ave_taxes" = "Taxes costs",
"ave_fluvial_damage" = "River damage costs",
"ave_pluvial_damage" = "Rain damage costs")
) +
#Y-axis formatting
scale_y_continuous(
labels = function(y) y / 1000,
name = "Game Currency (k)"
) +
scale_x_continuous(
name = "Welfare Classes",
breaks = c(1, 2, 3, 4, 5, 6),
labels = c("Very Low", "Low", "Low-average", "High-average", "High", "Very High")
#limits = c(x_min, x_max)
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 10),
plot.title.position = "plot"
)
print(plot)
ggsave(plot_name, width = 12, height = 6, dpi = 300)
return(plot)
}
source("~/TUDelft/18_Notebooks/R data analysis/250814_Ommen session_240924.R")
